// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

enum StockStatus {
  IN_STOCK
  OUT_OF_STOCK
  UNKNOWN
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  images      String[]
  priceVnd    Int?
  oldPrice    Int?
  discount    String?
  rating      Float?
  priceNote   String?
  stockStatus StockStatus @default(UNKNOWN)
  type        String?
  sku         String?     @unique
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id])
  leads       Lead[]

  @@unique([name, categoryId], name: "name_categoryId_unique")
  @@index([stockStatus, isActive])
  @@index([categoryId])
  @@map("products")
}

model Lead {
  id           String   @id @default(cuid())
  orderRef     String   @unique
  productId    String?
  productName  String
  price        Float
  variant      String?
  quantity     Int      @default(1)
  status       String   @default("pending_chat") // pending_chat, contacted, success, lost
  sessionId    String?
  clientIp     String?
  userAgent    String?
  landingUrl   String?
  referrer     String?
  utmSource    String?
  utmCampaign  String?
  utmMedium    String?
  deviceType   String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  product Product? @relation(fields: [productId], references: [id])

  @@index([status, createdAt])
  @@index([productId])
  @@index([createdAt])
  @@index([clientIp])
  @@map("leads")
}

model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("Staff")
  isActive  Boolean  @default(true)
  refreshToken String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  auditLogs AuditLog[]

  @@map("admin_users")
}

model Page {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  metaTitle   String?
  metaDescription String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("pages")
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json

  @@map("settings")
}

model Customer {
  id          String    @id @default(cuid())
  email       String?   @unique
  phone       String?   @unique
  name        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([email])
  @@index([phone])
  @@map("customers")
}

model Order {
  id        String   @id @default(cuid())
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, createdAt])
  @@map("orders")
}

model AuditLog {
  id           String    @id @default(cuid())
  adminUserId  String?
  action       String
  resourceType String?
  resourceId   String?
  details      Json?
  createdAt    DateTime  @default(now())
  adminUser    AdminUser? @relation(fields: [adminUserId], references: [id])

  @@map("audit_logs")
}