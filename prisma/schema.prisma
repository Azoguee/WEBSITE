// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING_PAYMENT
  PENDING_FULFILLMENT
  IN_PROGRESS
  COMPLETED
  CANCELED
  REFUNDED
}

enum FulfillmentMode {
  DELIVER_ACCOUNT
  SERVICE_CREDENTIALS
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@index([isActive, sortOrder])
  @@index([slug])
  @@map("categories")
}

model Product {
  id                      String   @id @default(cuid())
  sku                     String   @unique
  name                    String
  slug                    String   @unique
  description             String?  @db.Text
  price                   Float
  currency                String   @default("VND")
  categoryId              String
  images                  String?  @db.Text // Store as JSON string of URLs
  status                  String   @default("active") // active, inactive
  isFeatured              Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Fulfillment specific fields
  fulfillmentMode         FulfillmentMode @default(DELIVER_ACCOUNT)
  fulfillmentInstructions String?         @db.Text // Private instructions for the admin
  requiredCustomerFields  Json?           // e.g., ["username", "password"] or ["email"]

  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@index([categoryId, status])
  @@index([slug])
  @@map("products")
}


model Order {
  id                 String      @id @default(cuid())
  status             OrderStatus @default(PENDING_PAYMENT)
  totalAmount        Float
  customerName       String
  customerEmail      String
  customerPhone      String?

  // Sepay specific fields
  sepayTransactionId String?     @unique // Unique ID from Sepay for this order
  sepayQrCodeUrl     String?     @db.Text
  sepayCheckoutUrl   String?     @db.Text

  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  items              OrderItem[]
  credential         CredentialVault?
  auditLog           AuditLog[]

  @@index([status])
  @@index([customerEmail])
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  productName String  // Denormalized for easy display
  quantity    Int
  price       Float   // Price at the time of order

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict) // Prevent product deletion if ordered
}


// Secure vault for customer-provided credentials
model CredentialVault {
  id                   String   @id @default(cuid())
  orderId              String   @unique
  // Encrypted JSON blob of credentials
  encryptedCredentials Bytes
  // Initialization Vector for AES-256-CBC
  iv                   String
  accessLog            Json?    @default("[]") // Log who accessed this and when as a JSON array
  createdAt            DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(cuid())
  orderId   String
  timestamp DateTime @default(now())
  actor     String   // e.g., "admin@example.com" or "system"
  message   String   @db.Text

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model NotificationLog {
  id        String   @id @default(cuid())
  channel   String   // "TELEGRAM" or "EMAIL"
  recipient String
  subject   String
  content   String   @db.Text
  success   Boolean
  response  String?  @db.Text
  timestamp DateTime @default(now())
}